test_window_ET_data_inclusions$include_timepoint <- ifelse(test_window_ET_data_inclusions$subject_includable == 0, 0, ifelse(test_window_ET_data_inclusions$trial_includable == 0, 0, ifelse(test_window_ET_data_inclusions$region == 'missing', 0, ifelse(test_window_ET_data_inclusions$region == 'offscreen', 0, ifelse(test_window_ET_data_inclusions$region == 'margin', 0, ifelse(test_window_ET_data_inclusions$region == 'attractor', 0, 1))))))
#report number of infant included
infant_inclusion_report <- subject_inclusion_summary %>%
tally(subject_includable, name = 'includable_infants')
#report number of trials included
trial_inclusion_report <- test_trials_inclusion_summary %>%
group_by(expeCondition) %>%
tally(number_includable_trials, name = 'includable_trials')
trial_inclusion_report$total_trials <- 2*infant_inclusion_report[1,1]
#remove exclusions from data
test_window_ET_data_inclusions <- test_window_ET_data_inclusions[! (test_window_ET_data_inclusions$include_timepoint == 0),]
unique(test_window_ET_data_inclusions$include_timepoint)
######## compute accuracy per line and add to dataset ########
#add target response column (set container distractor as the target in both-distractors condition)
test_window_ET_data_inclusions$target_response <-
ifelse(test_window_ET_data_inclusions$correctSide == 'left', 'left',
ifelse(test_window_ET_data_inclusions$correctSide == 'right', 'right',
ifelse(test_window_ET_data_inclusions$stimulusName == 'test_locative_second_box_in_bucket_relation_left_container_right_ET_1920_1200.mov', 'right',
ifelse(test_window_ET_data_inclusions$stimulusName == 'test_locative_second_box_in_bucket_container_left_relation_right_ET_1920_1200.mov', 'left',
ifelse(test_window_ET_data_inclusions$stimulusName == 'test_locative_second_bucket_in_box_relation_left_container_right_ET_1920_1200.mov', 'right',
ifelse(test_window_ET_data_inclusions$stimulusName == 'test_locative_second_bucket_in_box_container_left_relation_right_ET_1920_1200.mov', 'left', 'NA'))))))
unique(test_window_ET_data_inclusions$target_response)
#add actual response column
test_window_ET_data_inclusions$actual_response <- ifelse(test_window_ET_data_inclusions$region == 'left_AOI', 'left', ifelse(test_window_ET_data_inclusions$region == 'right_AOI', 'right', 'NA'))
unique(test_window_ET_data_inclusions$actual_response)
#add column calculating whether response was accurate
test_window_ET_data_inclusions$accuracy <- ifelse(test_window_ET_data_inclusions$target_response == test_window_ET_data_inclusions$actual_response, 1,0)
unique(test_window_ET_data_inclusions$accuracy)
######## prepare non-baselined-corrected timeplots of total trial and also of just baseline+measurement windows ########
#prepare dataframe with n and mean per subject per timepoint per condition
test_summary_by_subject_condition_time <- test_window_ET_data_inclusions %>%
group_by(expeCondition, SubjectNumber,msec_in_trial) %>%
summarise(n = length(accuracy), subjMean = mean(accuracy))
#gather data so we can still compute sd
#prepare dataframe with n, mean and sd per timepoint per condition
test_summary_by_condition_time <- test_summary_by_subject_condition_time %>%
group_by(expeCondition,msec_in_trial) %>%
summarise(n = length(subjMean), mean = mean(subjMean), sd=sd(subjMean))
#remove points with only one datapoint
test_summary_by_condition_time <- test_summary_by_condition_time[! (test_summary_by_condition_time$n == 1),]
# add standard error of the mean
test_summary_by_condition_time$sem <- test_summary_by_condition_time$sd/sqrt(test_summary_by_condition_time$n-1)
#add confidence intervals
test_summary_by_condition_time$CI_lower <-
test_summary_by_condition_time$mean + qt((1-0.95)/2, test_summary_by_condition_time$n-1)*test_summary_by_condition_time$sem
test_summary_by_condition_time$CI_upper <-
test_summary_by_condition_time$mean - qt((1-0.95)/2, test_summary_by_condition_time$n-1)*test_summary_by_condition_time$sem
#isolate different conditions
test_summary_by_condition_time_both_dist <- test_summary_by_condition_time[! (test_summary_by_condition_time$expeCondition == 'targ_vs_rela' | test_summary_by_condition_time$expeCondition == 'targ_vs_cont'),]
test_summary_by_condition_time_targ_rela <- test_summary_by_condition_time[! (test_summary_by_condition_time$expeCondition == 'both_dist' | test_summary_by_condition_time$expeCondition == 'targ_vs_cont'),]
test_summary_by_condition_time_targ_cont <- test_summary_by_condition_time[! (test_summary_by_condition_time$expeCondition == 'targ_vs_rela' | test_summary_by_condition_time$expeCondition == 'both_dist'),]
test_summary_by_subject_condition_time_both_dist <- test_summary_by_subject_condition_time[! (test_summary_by_subject_condition_time$expeCondition == 'targ_vs_rela' | test_summary_by_subject_condition_time$expeCondition == 'targ_vs_cont'),]
test_summary_by_subject_condition_time_targ_rela <- test_summary_by_subject_condition_time[! (test_summary_by_subject_condition_time$expeCondition == 'both_dist' | test_summary_by_subject_condition_time$expeCondition == 'targ_vs_cont'),]
test_summary_by_subject_condition_time_targ_cont <- test_summary_by_subject_condition_time[! (test_summary_by_subject_condition_time$expeCondition == 'targ_vs_rela' | test_summary_by_subject_condition_time$expeCondition == 'both_dist'),]
#plot group mean with CI by condition
ggplot(test_summary_by_condition_time_both_dist, aes(x=msec_in_trial, y=mean)) +
geom_line(size=1, alpha=0.8) +
geom_ribbon(aes(ymin=CI_lower, ymax=CI_upper) , alpha=0.2) +
coord_cartesian(xlim = c(7120, 17960), ylim = c(0, 1)) +
annotate("rect",xmin=8640,xmax=11400,ymin=-Inf,ymax=Inf,alpha=0.1,fill="black") +
annotate("rect",xmin=13400,xmax=15960,ymin=-Inf,ymax=Inf,alpha=0.1,fill="black") +
theme_light(base_size = 16) +
geom_hline(yintercept=.5, linetype="dashed", color = "red") +
ylab("Proportion looks to target scene") + xlab("Time [msec]") +
ggtitle("Both distractors - whole trial - group mean by time")
ggplot(test_summary_by_condition_time_targ_rela, aes(x=msec_in_trial, y=mean)) +
geom_line(size=1, alpha=0.8) +
geom_ribbon(aes(ymin=CI_lower, ymax=CI_upper) , alpha=0.2) +
coord_cartesian(xlim = c(7120, 17960), ylim = c(0, 1)) +
annotate("rect",xmin=8640,xmax=11400,ymin=-Inf,ymax=Inf,alpha=0.1,fill="black") +
annotate("rect",xmin=13400,xmax=15960,ymin=-Inf,ymax=Inf,alpha=0.1,fill="black") +
theme_light(base_size = 16) +
geom_hline(yintercept=.5, linetype="dashed", color = "red") +
ylab("Proportion looks to target scene") + xlab("Time [msec]") +
ggtitle("Target vs. relation distractor - whole trial - group mean by time")
ggplot(test_summary_by_condition_time_targ_cont, aes(x=msec_in_trial, y=mean)) +
geom_line(size=1, alpha=0.8) +
geom_ribbon(aes(ymin=CI_lower, ymax=CI_upper) , alpha=0.2) +
coord_cartesian(xlim = c(7120, 17960), ylim = c(0, 1)) +
annotate("rect",xmin=8640,xmax=11400,ymin=-Inf,ymax=Inf,alpha=0.1,fill="black") +
annotate("rect",xmin=13400,xmax=15960,ymin=-Inf,ymax=Inf,alpha=0.1,fill="black") +
theme_light(base_size = 16) +
geom_hline(yintercept=.5, linetype="dashed", color = "red") +
ylab("Proportion looks to target scene") + xlab("Time [msec]") +
ggtitle("Target vs. container distractor - whole trial - group mean by time")
######## perform baseline correction ########
#isolate just baseline and measurement window
test_window_ET_data_inclusions <- test_window_ET_data_inclusions[! (test_window_ET_data_inclusions$marker == 'NA'| test_window_ET_data_inclusions$window == 'sentence1' | test_window_ET_data_inclusions$window == 'NA'),]
#compute count and tally per subject per trial per window
test_window_proportions_summary <- test_window_ET_data_inclusions %>%
group_by(SubjectNumber, expeCondition, correctSide, trialcount, window) %>%
summarise(timepoints_in_window = n(), number_accurate_timepoints = sum(accuracy))
# add column with proportion of accurate timepoints per window
test_window_proportions_summary$proportion_accurate_timepoints  <- test_window_proportions_summary$number_accurate_timepoints/test_window_proportions_summary$timepoints_in_window
#remove raw counts columns
test_window_proportions_summary <- subset(test_window_proportions_summary, select = -c(timepoints_in_window, number_accurate_timepoints))
#spread window into columns
test_window_proportions_summary <- spread(test_window_proportions_summary, window, proportion_accurate_timepoints)
#rename columns
names(test_window_proportions_summary) = c("SubjectNumber", "expeCondition", "correctSide", "trialcount", "baseline_proportion_accurate", "measurement_proportion_accurate")
# add column with baseline correction
test_window_proportions_summary$corrected_proportion <- test_window_proportions_summary$measurement_proportion_accurate - test_window_proportions_summary$baseline_proportion_accurate
# merge baseline corrections to ET data
corrected_test_window_ET_data_inclusions <- merge(test_window_ET_data_inclusions, test_window_proportions_summary, by=c('SubjectNumber', 'expeCondition', 'correctSide', 'trialcount'))
#remove unhelpful columns
corrected_test_window_ET_data_inclusions <- subset(corrected_test_window_ET_data_inclusions, select = -c(measurement_proportion_accurate,corrected_proportion))
#add corrected proportion by timepoint
corrected_test_window_ET_data_inclusions$corrected_timepoint <- corrected_test_window_ET_data_inclusions$accuracy - corrected_test_window_ET_data_inclusions$baseline_proportion_accurate
#remove baseline window
corrected_data_test <- corrected_test_window_ET_data_inclusions [! (corrected_test_window_ET_data_inclusions$window == 'baseline'),]
#prepare dataframe with n and mean per subject per timepoint per condition
corrected_data_by_subject_condition_time <- corrected_data_test %>%
group_by(expeCondition, SubjectNumber,msec_in_window) %>%
summarise(n = length(corrected_timepoint), subjMean = mean(corrected_timepoint))
#prepare dataframe with n, mean and sd per timepoint per condition
corrected_data_by_condition_time <- corrected_data_by_subject_condition_time %>%
group_by(expeCondition,msec_in_window) %>%
summarise(n = length(subjMean), mean = mean(subjMean), sd=sd(subjMean))
#remove points with only one datapoint
corrected_data_by_condition_time <- corrected_data_by_condition_time[! (corrected_data_by_condition_time$n == 1),]
# add standard error of the mean
corrected_data_by_condition_time$sem <- corrected_data_by_condition_time$sd/sqrt(corrected_data_by_condition_time$n-1)
#add confidence intervals
corrected_data_by_condition_time$CI_lower <-
corrected_data_by_condition_time$mean + qt((1-0.95)/2, corrected_data_by_condition_time$n-1)*corrected_data_by_condition_time$sem
corrected_data_by_condition_time$CI_upper <-
corrected_data_by_condition_time$mean - qt((1-0.95)/2, corrected_data_by_condition_time$n-1)*corrected_data_by_condition_time$sem
#separate data by condition
corrected_data_by_condition_time_both_dist <- corrected_data_by_condition_time[! (corrected_data_by_condition_time$expeCondition == 'targ_vs_rela' | corrected_data_by_condition_time$expeCondition == 'targ_vs_cont'),]
corrected_data_by_condition_time_targ_rela <- corrected_data_by_condition_time[! (corrected_data_by_condition_time$expeCondition == 'both_dist' | corrected_data_by_condition_time$expeCondition == 'targ_vs_cont'),]
corrected_data_by_condition_time_targ_cont <- corrected_data_by_condition_time[! (corrected_data_by_condition_time$expeCondition == 'targ_vs_rela' | corrected_data_by_condition_time$expeCondition == 'both_dist'),]
corrected_data_by_subject_condition_time_both_dist <- corrected_data_by_subject_condition_time[! (corrected_data_by_subject_condition_time$expeCondition == 'targ_vs_rela' | corrected_data_by_subject_condition_time$expeCondition == 'targ_vs_cont'),]
corrected_data_by_subject_condition_time_targ_rela <- corrected_data_by_subject_condition_time[! (corrected_data_by_subject_condition_time$expeCondition == 'both_dist' | corrected_data_by_subject_condition_time$expeCondition == 'targ_vs_cont'),]
corrected_data_by_subject_condition_time_targ_cont <- corrected_data_by_subject_condition_time[! (corrected_data_by_subject_condition_time$expeCondition == 'targ_vs_rela' | corrected_data_by_subject_condition_time$expeCondition == 'both_dist'),]
#plot timecourse by condition
ggplot(corrected_data_by_condition_time_both_dist, aes(x=msec_in_window, y=mean)) +
geom_line(size=1, alpha=0.8) +
geom_ribbon(aes(ymin=CI_lower, ymax=CI_upper) ,fill="red", alpha=0.2) +
coord_cartesian(xlim = c(0, 6560), ylim = c(-1, 1)) +
annotate("rect",xmin=2000,xmax=4560,ymin=-Inf,ymax=Inf,alpha=0.1,fill="black") +
theme_light(base_size = 16) +
geom_hline(yintercept=0, linetype="dashed", color = "black") +
ylab("Baseline-corrected proportion looks to target scene") + xlab("Time [msec]") +
ggtitle("Both distractors condition group mean by time")
ggplot(corrected_data_by_condition_time_targ_rela, aes(x=msec_in_window, y=mean)) +
geom_line(size=1, alpha=0.8) +
geom_ribbon(aes(ymin=CI_lower, ymax=CI_upper) ,fill="blue", alpha=0.2) +
coord_cartesian(xlim = c(0, 6560), ylim = c(-1, 1)) +
annotate("rect",xmin=2000,xmax=4560,ymin=-Inf,ymax=Inf,alpha=0.1,fill="black") +
theme_light(base_size = 16) +
geom_hline(yintercept=0, linetype="dashed", color = "black") +
ylab("Baseline-corrected proportion looks to target scene") + xlab("Time [msec]") +
ggtitle("Target vs. relation distractor condition group mean by time")
ggplot(corrected_data_by_condition_time_targ_cont, aes(x=msec_in_window, y=mean)) +
geom_line(size=1, alpha=0.8) +
geom_ribbon(aes(ymin=CI_lower, ymax=CI_upper) ,fill="green", alpha=0.2) +
coord_cartesian(xlim = c(0, 6560), ylim = c(-1, 1)) +
annotate("rect",xmin=2000,xmax=4560,ymin=-Inf,ymax=Inf,alpha=0.1,fill="black") +
theme_light(base_size = 16) +
geom_hline(yintercept=0, linetype="dashed", color = "black") +
ylab("Baseline-corrected proportion looks to target scene") + xlab("Time [msec]") +
ggtitle("Target vs. container distractor condition group mean by time")
######## compute baseline-corrected grand averages ########
#calculate average per condition per infant
test_infant_condition_means <- test_window_proportions_summary %>%
group_by(expeCondition,SubjectNumber) %>%
summarise(mean = mean(corrected_proportion))
#calculate average per condition using infant averages
test_group_condition_means <- test_infant_condition_means %>%
group_by(expeCondition) %>%
summarise(n=length(mean), mean = mean(mean), sd = sd(mean))
# add standard error of the mean
test_group_condition_means$sem <- test_group_condition_means$sd/sqrt(test_group_condition_means$n-1)
#add confidence intervals
test_group_condition_means$CI_lower <-
test_group_condition_means$mean + qt((1-0.95)/2, test_group_condition_means$n-1)*test_group_condition_means$sem
test_group_condition_means$CI_upper <-
test_group_condition_means$mean - qt((1-0.95)/2, test_group_condition_means$n-1)*test_group_condition_means$sem
#plot bar graph of means per condition with CIs
ggplot(test_infant_condition_means, aes(y=mean, x=expeCondition, fill=expeCondition)) +
geom_point() +
geom_bar(data=test_group_condition_means, stat='identity') +
coord_cartesian(ylim = c(-.5,.5))
#NEEDS TO BE PRETTIER
#ADD INFANT MEANS OVER THIS PLOT
######## run one-sample t-tests to compare baseline-corrected grand averages to chance (y=0) ########
#split the data by condition
test_infant_both_dist_means <- test_infant_condition_means[!(test_infant_condition_means$expeCondition == 'targ_vs_rela' | test_infant_condition_means$expeCondition == 'targ_vs_cont'), ]
test_infant_targ_cont_means <- test_infant_condition_means[!(test_infant_condition_means$expeCondition == 'targ_vs_rela' | test_infant_condition_means$expeCondition == 'both_dist'), ]
test_infant_targ_rela_means <- test_infant_condition_means[!(test_infant_condition_means$expeCondition == 'both_dist' | test_infant_condition_means$expeCondition == 'targ_vs_cont'), ]
# check that the data comes from a normal distribution
test_infant_both_dist_means_qq <- ggplot(test_infant_both_dist_means, aes(sample=infant_mean))
test_infant_both_dist_means_qq + stat_qq() + stat_qq_line()
test_infant_targ_cont_means_qq <- ggplot(test_infant_targ_cont_means, aes(sample=infant_mean))
test_infant_targ_cont_means_qq + stat_qq() + stat_qq_line()
test_infant_targ_rela_means_qq <- ggplot(test_infant_targ_rela_means, aes(sample=infant_mean))
test_infant_targ_rela_means_qq + stat_qq() + stat_qq_line()
#perform one sample t-test with mu=0
both_dist_one_ttest <- t.test(test_infant_both_dist_means$infant_mean, mu = 0)
targ_cont_one_ttest <- t.test(test_infant_targ_cont_means$infant_mean, mu = 0)
targ_rela_one_ttest <- t.test(test_infant_targ_rela_means$infant_mean, mu = 0)
both_dist_one_ttest
targ_cont_one_ttest
targ_rela_one_ttest
######## run one-sample t-tests on binned averages ########
##compute baseline-corrected grand average per bin
#isolate just measurement window
test_window_ET_data_inclusions_bin <- test_window_ET_data_inclusions[! (test_window_ET_data_inclusions$marker == 'NA'| test_window_ET_data_inclusions$window == 'sentence1' | test_window_ET_data_inclusions$window == 'baseline' |test_window_ET_data_inclusions$window == 'NA'),]
#compute count and tally per subject per trial per bin
test_window_proportions_summary_500bin <- test_window_ET_data_inclusions_bin %>%
group_by(SubjectNumber, expeCondition, correctSide, trialcount, bin500) %>%
summarise(timepoints_in_bin = n(), number_accurate_timepoints = sum(accuracy))
test_window_proportions_summary_1000bin <- test_window_ET_data_inclusions_bin %>%
group_by(SubjectNumber, expeCondition, correctSide, trialcount, bin1000) %>%
summarise(timepoints_in_bin = n(), number_accurate_timepoints = sum(accuracy))
test_window_proportions_summary_2000bin <- test_window_ET_data_inclusions_bin %>%
group_by(SubjectNumber, expeCondition, correctSide, trialcount, bin2000) %>%
summarise(timepoints_in_bin = n(), number_accurate_timepoints = sum(accuracy))
# add column with proportion of accurate timepoints per window
test_window_proportions_summary_500bin$measurement_proportion_accurate  <- test_window_proportions_summary_500bin$number_accurate_timepoints/test_window_proportions_summary_500bin$timepoints_in_bin
test_window_proportions_summary_1000bin$measurement_proportion_accurate  <- test_window_proportions_summary_1000bin$number_accurate_timepoints/test_window_proportions_summary_1000bin$timepoints_in_bin
test_window_proportions_summary_2000bin$measurement_proportion_accurate  <- test_window_proportions_summary_2000bin$number_accurate_timepoints/test_window_proportions_summary_2000bin$timepoints_in_bin
#remove raw counts columns
test_window_proportions_summary_500bin <- subset(test_window_proportions_summary_500bin, select = -c(timepoints_in_bin, number_accurate_timepoints))
test_window_proportions_summary_1000bin <- subset(test_window_proportions_summary_1000bin, select = -c(timepoints_in_bin, number_accurate_timepoints))
test_window_proportions_summary_2000bin <- subset(test_window_proportions_summary_2000bin, select = -c(timepoints_in_bin, number_accurate_timepoints))
#get baselines
test_window_proportions_summary_baselines <- corrected_test_window_ET_data_inclusions %>%
group_by(SubjectNumber, expeCondition, correctSide, trialcount) %>%
summarise(baseline_prop_acc = mean(baseline_proportion_accurate))
# merge binned data and baseline
test_window_proportions_summary_500bin <- merge(test_window_proportions_summary_500bin, test_window_proportions_summary_baselines, by=c('SubjectNumber', 'expeCondition', 'correctSide', 'trialcount'))
test_window_proportions_summary_1000bin <- merge(test_window_proportions_summary_1000bin, test_window_proportions_summary_baselines, by=c('SubjectNumber', 'expeCondition', 'correctSide', 'trialcount'))
test_window_proportions_summary_2000bin <- merge(test_window_proportions_summary_2000bin, test_window_proportions_summary_baselines, by=c('SubjectNumber', 'expeCondition', 'correctSide', 'trialcount'))
#compute correction
test_window_proportions_summary_500bin$corrected_prop_acc <- test_window_proportions_summary_500bin$measurement_proportion_accurate - test_window_proportions_summary_500bin$baseline_prop_acc
test_window_proportions_summary_1000bin$corrected_prop_acc <- test_window_proportions_summary_1000bin$measurement_proportion_accurate - test_window_proportions_summary_1000bin$baseline_prop_acc
test_window_proportions_summary_2000bin$corrected_prop_acc <- test_window_proportions_summary_2000bin$measurement_proportion_accurate - test_window_proportions_summary_2000bin$baseline_prop_acc
#prepare dataframe with n and mean per subject per bin per condition
corrected_data_by_subject_condition_500bin <- test_window_proportions_summary_500bin %>%
group_by(expeCondition, SubjectNumber,bin500) %>%
summarise(n = length(corrected_prop_acc), subjMean = mean(corrected_prop_acc))
corrected_data_by_subject_condition_1000bin <- test_window_proportions_summary_1000bin %>%
group_by(expeCondition, SubjectNumber,bin1000) %>%
summarise(n = length(corrected_prop_acc), subjMean = mean(corrected_prop_acc))
corrected_data_by_subject_condition_2000bin <- test_window_proportions_summary_2000bin %>%
group_by(expeCondition, SubjectNumber,bin2000) %>%
summarise(n = length(corrected_prop_acc), subjMean = mean(corrected_prop_acc))
#prepare dataframe with n, mean and sd per timepoint per condition
corrected_data_by_condition_500bin <- corrected_data_by_subject_condition_500bin %>%
group_by(expeCondition,bin500) %>%
summarise(n = length(subjMean), mean = mean(subjMean), sd=sd(subjMean))
corrected_data_by_condition_1000bin <- corrected_data_by_subject_condition_1000bin %>%
group_by(expeCondition,bin1000) %>%
summarise(n = length(subjMean), mean = mean(subjMean), sd=sd(subjMean))
corrected_data_by_condition_2000bin <- corrected_data_by_subject_condition_2000bin %>%
group_by(expeCondition,bin2000) %>%
summarise(n = length(subjMean), mean = mean(subjMean), sd=sd(subjMean))
# add standard error of the mean
corrected_data_by_condition_500bin$sem <- corrected_data_by_condition_500bin$sd/sqrt(corrected_data_by_condition_500bin$n-1)
#add confidence intervals
corrected_data_by_condition_500bin$CI_lower <-
corrected_data_by_condition_500bin$mean + qt((1-0.95)/2, corrected_data_by_condition_500bin$n-1)*corrected_data_by_condition_500bin$sem
corrected_data_by_condition_500bin$CI_upper <-
corrected_data_by_condition_500bin$mean - qt((1-0.95)/2, corrected_data_by_condition_500bin$n-1)*corrected_data_by_condition_500bin$sem
corrected_data_by_condition_1000bin$sem <- corrected_data_by_condition_1000bin$sd/sqrt(corrected_data_by_condition_1000bin$n-1)
#add confidence intervals
corrected_data_by_condition_1000bin$CI_lower <-
corrected_data_by_condition_1000bin$mean + qt((1-0.95)/2, corrected_data_by_condition_1000bin$n-1)*corrected_data_by_condition_1000bin$sem
corrected_data_by_condition_1000bin$CI_upper <-
corrected_data_by_condition_1000bin$mean - qt((1-0.95)/2, corrected_data_by_condition_1000bin$n-1)*corrected_data_by_condition_1000bin$sem
corrected_data_by_condition_2000bin$sem <- corrected_data_by_condition_2000bin$sd/sqrt(corrected_data_by_condition_2000bin$n-1)
#add confidence intervals
corrected_data_by_condition_2000bin$CI_lower <-
corrected_data_by_condition_2000bin$mean + qt((1-0.95)/2, corrected_data_by_condition_2000bin$n-1)*corrected_data_by_condition_2000bin$sem
corrected_data_by_condition_2000bin$CI_upper <-
corrected_data_by_condition_2000bin$mean - qt((1-0.95)/2, corrected_data_by_condition_2000bin$n-1)*corrected_data_by_condition_2000bin$sem
#split by condition
corrected_data_by_condition_500bin_both_dist <- corrected_data_by_condition_500bin[! (corrected_data_by_condition_500bin$expeCondition == 'targ_vs_rela' | corrected_data_by_condition_500bin$expeCondition == 'targ_vs_cont'),]
corrected_data_by_condition_500bin_targ_rela <- corrected_data_by_condition_500bin[! (corrected_data_by_condition_500bin$expeCondition == 'both_dist' | corrected_data_by_condition_500bin$expeCondition == 'targ_vs_cont'),]
corrected_data_by_condition_500bin_targ_cont <- corrected_data_by_condition_500bin[! (corrected_data_by_condition_500bin$expeCondition == 'targ_vs_rela' | corrected_data_by_condition_500bin$expeCondition == 'both_dist'),]
corrected_data_by_condition_1000bin_both_dist <- corrected_data_by_condition_1000bin[! (corrected_data_by_condition_1000bin$expeCondition == 'targ_vs_rela' | corrected_data_by_condition_1000bin$expeCondition == 'targ_vs_cont'),]
corrected_data_by_condition_1000bin_targ_rela <- corrected_data_by_condition_1000bin[! (corrected_data_by_condition_1000bin$expeCondition == 'both_dist' | corrected_data_by_condition_1000bin$expeCondition == 'targ_vs_cont'),]
corrected_data_by_condition_1000bin_targ_cont <- corrected_data_by_condition_1000bin[! (corrected_data_by_condition_1000bin$expeCondition == 'targ_vs_rela' | corrected_data_by_condition_1000bin$expeCondition == 'both_dist'),]
corrected_data_by_condition_2000bin_both_dist <- corrected_data_by_condition_2000bin[! (corrected_data_by_condition_2000bin$expeCondition == 'targ_vs_rela' | corrected_data_by_condition_2000bin$expeCondition == 'targ_vs_cont'),]
corrected_data_by_condition_2000bin_targ_rela <- corrected_data_by_condition_2000bin[! (corrected_data_by_condition_2000bin$expeCondition == 'both_dist' | corrected_data_by_condition_2000bin$expeCondition == 'targ_vs_cont'),]
corrected_data_by_condition_2000bin_targ_cont <- corrected_data_by_condition_2000bin[! (corrected_data_by_condition_2000bin$expeCondition == 'targ_vs_rela' | corrected_data_by_condition_2000bin$expeCondition == 'both_dist'),]
#plot bar graph of means per condition with CIs
ggplot(corrected_data_by_condition_500bin_both_dist, aes(y=mean, x=bin500)) +
geom_bar(stat='identity') +
geom_errorbar(aes(ymin=CI_lower, ymax=CI_upper)) +
labs(title="Plot of baseline-corrected looking by bin - both distractors condition",
x="500ms Bin", y = "Mean looks to target (corrected)")+
coord_cartesian(ylim = c(-.5,.5))
ggplot(corrected_data_by_condition_1000bin_both_dist, aes(y=mean, x=bin1000)) +
geom_bar(stat='identity') +
geom_errorbar(aes(ymin=CI_lower, ymax=CI_upper)) +
labs(title="Plot of baseline-corrected looking by bin - both distractors condition",
x="1000ms Bin", y = "Mean looks to target (corrected)")+
coord_cartesian(ylim = c(-.5,.5))
ggplot(corrected_data_by_condition_2000bin_both_dist, aes(y=mean, x=bin2000)) +
geom_bar(stat='identity') +
geom_errorbar(aes(ymin=CI_lower, ymax=CI_upper)) +
labs(title="Plot of baseline-corrected looking by bin - both distractors condition",
x="2000ms Bin", y = "Mean looks to target (corrected)")+
coord_cartesian(ylim = c(-.5,.5))
ggplot(corrected_data_by_condition_500bin_targ_rela, aes(y=mean, x=bin500)) +
geom_bar(stat='identity') +
geom_errorbar(aes(ymin=CI_lower, ymax=CI_upper)) +
labs(title="Plot of baseline-corrected looking by bin - Target vs. relation distractor",
x="500ms Bin", y = "Mean looks to target (corrected)")+
coord_cartesian(ylim = c(-.5,.5))
ggplot(corrected_data_by_condition_1000bin_targ_rela, aes(y=mean, x=bin1000)) +
geom_bar(stat='identity') +
geom_errorbar(aes(ymin=CI_lower, ymax=CI_upper)) +
labs(title="Plot of baseline-corrected looking by bin - Target vs. relation distractor",
x="1000ms Bin", y = "Mean looks to target (corrected)")+
coord_cartesian(ylim = c(-.5,.5))
ggplot(corrected_data_by_condition_2000bin_targ_rela, aes(y=mean, x=bin2000)) +
geom_bar(stat='identity') +
geom_errorbar(aes(ymin=CI_lower, ymax=CI_upper)) +
labs(title="Plot of baseline-corrected looking by bin - Target vs. relation distractor",
x="2000ms Bin", y = "Mean looks to target (corrected)")+
coord_cartesian(ylim = c(-.5,.5))
ggplot(corrected_data_by_condition_500bin_targ_cont, aes(y=mean, x=bin500)) +
geom_bar(stat='identity') +
geom_errorbar(aes(ymin=CI_lower, ymax=CI_upper)) +
labs(title="Plot of baseline-corrected looking by bin - Target vs. container distractor",
x="500ms Bin", y = "Mean looks to target (corrected)")+
coord_cartesian(ylim = c(-.5,.5))
ggplot(corrected_data_by_condition_1000bin_targ_cont, aes(y=mean, x=bin1000)) +
geom_bar(stat='identity') +
geom_errorbar(aes(ymin=CI_lower, ymax=CI_upper)) +
labs(title="Plot of baseline-corrected looking by bin - Target vs. container distractor",
x="1000ms Bin", y = "Mean looks to target (corrected)")+
coord_cartesian(ylim = c(-.5,.5))
ggplot(corrected_data_by_condition_2000bin_targ_cont, aes(y=mean, x=bin2000)) +
geom_bar(stat='identity') +
geom_errorbar(aes(ymin=CI_lower, ymax=CI_upper)) +
labs(title="Plot of baseline-corrected looking by bin - Target vs. container distractor",
x="2000ms Bin", y = "Mean looks to target (corrected)")+
coord_cartesian(ylim = c(-.5,.5))
ggplot(test_infant_condition_means, aes(y=mean, x=expeCondition, fill=expeCondition)) +
geom_point() +
geom_bar(data=test_group_condition_means, stat='identity') +
coord_cartesian(ylim = c(-.5,.5))
ggplot(test_infant_condition_means, aes(y=mean, x=expeCondition, fill=expeCondition)) +
geom_line() +
geom_bar(data=test_group_condition_means, stat='identity') +
coord_cartesian(ylim = c(-.5,.5))
ggplot(test_infant_condition_means, aes(y=mean, x=expeCondition, fill=expeCondition)) +
geom_point() +
geom_line(group=SubjectNumber)
geom_bar(data=test_group_condition_means, stat='identity') +
coord_cartesian(ylim = c(-.5,.5))
ggplot(test_infant_condition_means, aes(y=mean, x=expeCondition, fill=expeCondition)) +
geom_point() +
geom_line(aes(group=SubjectNumber)) +
geom_bar(data=test_group_condition_means, stat='identity') +
coord_cartesian(ylim = c(-.5,.5))
ggplot(test_infant_condition_means, aes(y=mean, x=expeCondition, fill=expeCondition)) +
geom_point() +
geom_line(aes(group=SubjectNumber)) +
geom_bar(data=test_group_condition_means, stat='identity') +
coord_cartesian(ylim = c(-1,1))
ggplot(test_infant_condition_means, aes(y=mean, x=expeCondition, fill=expeCondition)) +
geom_boxplot() +
geom_jitter() +
geom_line(aes(group=SubjectNumber)) +
coord_cartesian(ylim = c(-1,1))
ggplot(test_infant_condition_means, aes(y=mean, x=expeCondition, fill=expeCondition)) +
geom_boxplot() +
geom_jitter() +
geom_line(aes(group=SubjectNumber), color="gray") +
coord_cartesian(ylim = c(-1,1))
ggplot(test_infant_condition_means, aes(y=mean, x=expeCondition, fill=expeCondition)) +
geom_line(aes(group=SubjectNumber), color="gray") +
geom_boxplot() +
geom_jitter() +
coord_cartesian(ylim = c(-1,1))
geom_line(aes(group=SubjectNumber), color="gray") +
geom_boxplot() +
geom_point()) +
coord_cartesian(ylim = c(-1,1))
ggplot(test_infant_condition_means, aes(y=mean, x=expeCondition, fill=expeCondition)) +
geom_line(aes(group=SubjectNumber), color="gray") +
geom_boxplot() +
geom_point()) +
coord_cartesian(ylim = c(-1,1))
ggplot(test_infant_condition_means, aes(y=mean, x=expeCondition, fill=expeCondition)) +
geom_line(aes(group=SubjectNumber), color="gray") +
geom_boxplot() +
geom_point()) +
coord_cartesian(ylim = c(-1,1))
ggplot(test_infant_condition_means, aes(y=mean, x=expeCondition, fill=expeCondition)) +
geom_point()) +
geom_line(aes(group=SubjectNumber), color="gray") +
geom_boxplot() +
coord_cartesian(ylim = c(-1,1))
ggplot(test_infant_condition_means, aes(y=mean, x=expeCondition, fill=expeCondition)) +
geom_line(aes(group=SubjectNumber), color="gray") +
geom_boxplot() +
geom_point()) +
coord_cartesian(ylim = c(-1,1))
ggplot(test_infant_condition_means, aes(y=mean, x=expeCondition, fill=expeCondition)) +
geom_line(aes(group=SubjectNumber), color="gray") +
geom_boxplot() +
geom_point() +
coord_cartesian(ylim = c(-1,1))
ggplot(test_infant_condition_means, aes(y=mean, x=expeCondition, fill=expeCondition)) +
geom_boxplot() +geom_line(aes(group=SubjectNumber), color="gray") +
geom_point() +
coord_cartesian(ylim = c(-1,1))
ggplot(test_infant_condition_means, aes(y=mean, x=expeCondition, fill=expeCondition)) +
geom_boxplot() +geom_line(aes(group=SubjectNumber), color="gray") +
geom_point() +
coord_cartesian(ylim = c(-.75,.75))
View(corrected_data_by_condition_2000bin_targ_cont)
######## prepare workspace ########
#load required packages
require(tidyverse)
#set working directory
setwd("~/Documents/GitHub/at-issue/data/primary_data")
######## create master file of raw data ########
#pull file names from the data folder
ATI_conditions = list.files(getwd())
ATI_conditions = ATI_conditions[grepl(".csv",ATI_conditions)]
#use lapply to apply the read.delim function to all file names
ATI_data = lapply(ATI_conditions, read.csv, header = TRUE)
ATI_data = do.call(rbind,ATI_data)
######## prepare workspace ########
#load required packages
require(tidyverse)
#set working directory
setwd("~/Documents/GitHub/at-issue/data/primary_data")
######## create master file of raw data ########
#pull file names from the data folder
ATI_conditions = list.files(getwd())
ATI_conditions = ATI_conditions[grepl(".csv",ATI_conditions)]
#prep read.csv function
ATI_data = read.csv("results-full-ATI-5.csv", header = TRUE, sep="\t")
#use lapply to apply the read.delim function to all file names
ATI_data = lapply(ATI_conditions, read.csv, header = TRUE)
ATI_data = do.call(rbind,ATI_data)
######## prepare workspace ########
#load required packages
require(tidyverse)
#set working directory
setwd("~/Documents/GitHub/at-issue/data/primary_data")
######## create master file of raw data ########
#pull file names from the data folder
ATI_conditions = list.files(getwd())
ATI_conditions = ATI_conditions[grepl(".csv",ATI_conditions)]
#prep read.csv function
ATI_data = read.csv("results-full-ATI-5.csv", header = TRUE, sep="\t")
#use lapply to apply the read.delim function to all file names
ATI_data = lapply(ATI_conditions, read.csv)
ATI_data = do.call(rbind,ATI_data)
######## prepare workspace ########
#load required packages
require(tidyverse)
#set working directory
setwd("~/Documents/GitHub/at-issue/data/primary_data")
######## create master file of raw data ########
#pull file names from the data folder
ATI_conditions = list.files(getwd())
ATI_conditions = ATI_conditions[grepl(".csv",ATI_conditions)]
#prep read.csv function
ATI_data = read.csv("results-full-ATI-5.csv", header = TRUE, sep="\t")
#use lapply to apply the read.delim function to all file names
ATI_data = lapply(ATI_conditions, read.csv, header = FALSE, sep=",", fill = TRUE)
ATI_data = do.call(rbind,ATI_data)
view(ATI_data)
######## prepare workspace ########
#load required packages
require(tidyverse)
#set working directory
setwd("~/Documents/GitHub/at-issue/data/primary_data")
######## create master file of raw data ########
#pull file names from the data folder
ATI_conditions = list.files(getwd())
ATI_conditions = ATI_conditions[grepl(".csv",ATI_conditions)]
#prep read.csv function
ATI_data = read.csv("results-full-ATI-5.csv", header = TRUE, sep="\t")
#use lapply to apply the read.delim function to all file names
ATI_data = lapply(ATI_conditions, read.csv, header = FALSE, sep=",", row.names=c("Time_ID", "IP_ID", "Controller", "Item_number", "Element_number", "Type", "Group", "Question", "Response", "Accurate", "Response_time") fill = TRUE)
ATI_data = do.call(rbind,ATI_data)
######## prepare workspace ########
#load required packages
require(tidyverse)
#set working directory
setwd("~/Documents/GitHub/at-issue/data/primary_data")
######## create master file of raw data ########
#pull file names from the data folder
ATI_conditions = list.files(getwd())
ATI_conditions = ATI_conditions[grepl(".csv",ATI_conditions)]
#prep read.csv function
ATI_data = read.csv("results-full-ATI-5.csv", header = TRUE, sep="\t")
#use lapply to apply the read.delim function to all file names
ATI_data = lapply(ATI_conditions, read.csv, header = FALSE, sep=",", col.names=c("Time_ID", "IP_ID", "Controller", "Item_number", "Element_number", "Type", "Group", "Question", "Response", "Accurate", "Response_time") fill = TRUE)
ATI_data = do.call(rbind,ATI_data)
#use lapply to apply the read.delim function to all file names
ATI_data = lapply(ATI_conditions, read.csv, header = FALSE, skip=15, sep=",", col.names=c("Time_ID", "IP_ID", "Controller", "Item_number", "Element_number", "Type", "Group", "Question", "Response", "Accurate", "Response_time") fill = TRUE)
ATI_data = do.call(rbind,ATI_data)
ATI_data = lapply(ATI_conditions, read.csv, header = FALSE, skip=15, sep=",", col.names=c("Time_ID", "IP_ID", "Controller", "Item_number", "Element_number", "Type", "Group", "Question", "Response", "Accurate", "Response_time") fill = TRUE)
ATI_data = lapply(ATI_conditions, read.csv)
ATI_data = read.csv("results-full-ATI-5.csv", header = FALSE, sep=",")
view(ATI_data)
ATI_data = read.csv("results-full-ATI-5.csv", header = FALSE, sep=",", skip=15)
view(ATI_data)
ATI_data = read.csv("results-full-ATI-5.csv", header = FALSE, sep=",", skip=15, col.names=c("Time_ID", "IP_ID", "Controller", "Item_number", "Element_number", "Type", "Group", "Question", "Response", "Accurate", "Response_time"), fill = TRUE)
view(ATI_data)
